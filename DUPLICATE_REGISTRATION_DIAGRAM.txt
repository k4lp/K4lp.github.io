╔════════════════════════════════════════════════════════════════════════════════╗
║         GDRS INITIALIZATION FLOW - DUPLICATE LOCALSTORAGE REGISTRATION          ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────────┐
│ MODULE IMPORT PHASE (Synchronous)                                              │
└─────────────────────────────────────────────────────────────────────────────────┘

  main.js:1
  ├─ import { storageProviderManager } from './storage/providers/storage-provider-manager.js'
  │  │
  │  ├─ storage-provider-manager.js loads
  │  │  ├─ export class StorageProviderManager
  │  │  ├─ export const storageProviderManager = new StorageProviderManager()
  │  │  │
  │  │  └─► constructor() {
  │  │      this.currentProviderName = 'localStorage';
  │  │      this._initializeDefaultProvider();  ◄── FIRST REGISTRATION POINT
  │  │      }
  │  │
  │  └─► _initializeDefaultProvider() {
  │      Registry.register(
  │        ExtensionPoints.STORAGE_PROVIDERS,
  │        'localStorage',          ◄── REGISTRATION #1 ✓
  │        LocalStorageProvider
  │      );
  │      this.setProvider('localStorage');
  │      }
  │
  ├─ Imports continue (other core modules)
  │  ├─ extension-points.js ✓
  │  ├─ event-bus.js ✓
  │  ├─ gemini-provider.js ✓
  │  └─ etc...
  │
  └─ main.js IIFE starts
     └─ Waits for DOMContentLoaded...


┌─────────────────────────────────────────────────────────────────────────────────┐
│ DOM READY PHASE (After page loads)                                             │
└─────────────────────────────────────────────────────────────────────────────────┘

  DOMContentLoaded event fires
  │
  └─ initializeGDRS() function executes
     │
     ├─ console.log('GDRS v' + VERSION)
     │
     ├─ window.GDRS = { ... }  (expose 14 core modules)
     │
     ├─ Registry.register(
     │    ExtensionPoints.STORAGE_PROVIDERS,
     │    'localStorage',          ◄── REGISTRATION #2 ⚠️ DUPLICATE
     │    LocalStorageProvider
     │  );
     │
     ├─ Console Output:
     │  ┌───────────────────────────────────────────────────┐
     │  │ [Registry] Overwriting existing implementation    │
     │  │ "localStorage" for extension point               │
     │  │ "storage.providers"                               │
     │  └───────────────────────────────────────────────────┘
     │
     ├─ Registry.register(
     │    ExtensionPoints.API_PROVIDERS,
     │    'gemini',                ◄── REGISTRATION #3 ✓
     │    GeminiProvider
     │  );
     │
     ├─ Renderer.init()
     │
     ├─ boot()  ◄── Separate boot sequence
     │  ├─ Storage initialization
     │  ├─ Vault validation
     │  ├─ Renderer.renderAll()
     │  ├─ bindEvents()
     │  └─ Model list fetching
     │
     └─ Application Ready ✓


╔════════════════════════════════════════════════════════════════════════════════╗
║                          THE DUPLICATE LOCATIONS                               ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌─ LOCATION 1: storage-provider-manager.js ─────────────────────────────┐
│                                                                        │
│  Constructor runs DURING IMPORT (synchronous)                        │
│                                                                        │
│  export const storageProviderManager = new StorageProviderManager(); │
│                                  ↓                                    │
│  _initializeDefaultProvider() {                                      │
│    Registry.register(                                                │
│      ExtensionPoints.STORAGE_PROVIDERS,                              │
│      'localStorage',                    ◄── FIRST TIME ✓            │
│      LocalStorageProvider                                            │
│    );                                                                │
│    this.setProvider('localStorage');                                 │
│  }                                                                   │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘

┌─ LOCATION 2: main.js ──────────────────────────────────────────────────┐
│                                                                        │
│  Runs AFTER DOM READY (from DOMContentLoaded event)                 │
│                                                                        │
│  function initializeGDRS() {                                         │
│    window.GDRS = { ... };                                           │
│                                                                        │
│    Registry.register(                                                │
│      ExtensionPoints.STORAGE_PROVIDERS,                              │
│      'localStorage',                    ◄── SECOND TIME ⚠️          │
│      LocalStorageProvider                                            │
│    );  // ← Console warning logged here                              │
│                                                                        │
│    Registry.register(                                                │
│      ExtensionPoints.API_PROVIDERS,                                  │
│      'gemini',                          ◄── ONLY REGISTERED ONCE ✓  │
│      GeminiProvider                                                  │
│    );                                                                │
│                                                                        │
│    Renderer.init();                                                  │
│    boot();                                                           │
│  }                                                                   │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════════╗
║                    REGISTRY STATE VISUALIZATION                                ║
╚════════════════════════════════════════════════════════════════════════════════╝

Before initializeGDRS():
┌──────────────────────────────────────────┐
│ Registry State (in memory)               │
├──────────────────────────────────────────┤
│ storage.providers:                       │
│  ├─ localStorage → LocalStorageProvider  │ ◄── REGISTERED #1
│  └─ (no others)                          │
│                                          │
│ api.providers:                           │
│  └─ (empty, not yet registered)          │
└──────────────────────────────────────────┘

After first Registry.register() in initializeGDRS():
┌──────────────────────────────────────────┐
│ Registry State (in memory)               │
├──────────────────────────────────────────┤
│ storage.providers:                       │
│  ├─ localStorage → LocalStorageProvider  │ ◄── OVERWRITTEN #2
│  │                                       │    (same class)
│  └─ (no others)                          │
│                                          │
│ api.providers:                           │
│  └─ (empty, not yet registered)          │
│                                          │
│ ⚠️ WARNING: Overwriting existing impl    │
└──────────────────────────────────────────┘

After second Registry.register() in initializeGDRS():
┌──────────────────────────────────────────┐
│ Registry State (in memory)               │
├──────────────────────────────────────────┤
│ storage.providers:                       │
│  └─ localStorage → LocalStorageProvider  │
│                                          │
│ api.providers:                           │
│  └─ gemini → GeminiProvider              │ ◄── REGISTERED #3 ✓
│                                          │
│ ✓ State is correct (despite duplication)│
└──────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════════╗
║                        RECOMMENDED SOLUTIONS                                   ║
╚════════════════════════════════════════════════════════════════════════════════╝

OPTION A: Remove from main.js (Simplest)
──────────────────────────────────────────

// main.js line 104 - REMOVE THIS:
// Registry.register(ExtensionPoints.STORAGE_PROVIDERS, 'localStorage', LocalStorageProvider);

// Keep this:
Registry.register(ExtensionPoints.API_PROVIDERS, 'gemini', GeminiProvider);

BENEFIT: Cleaner main.js, removes duplication
TRADE-OFF: Relies on StorageProviderManager constructor side effect


OPTION B: Remove from StorageProviderManager
──────────────────────────────────────────────

// storage-provider-manager.js - REMOVE the _initializeDefaultProvider() call
// Let main.js handle all provider registration

export class StorageProviderManager {
  constructor() {
    this.currentProviderName = 'localStorage';
    this.currentProvider = null;
    // this._initializeDefaultProvider();  // ← REMOVE THIS
  }

BENEFIT: Centralizes all registration in main.js
TRADE-OFF: StorageProviderManager less self-contained


OPTION C: Create provider-boot.js module (Best Practice)
─────────────────────────────────────────────────────────

// js/core/provider-boot.js (NEW FILE)
export function initializeDefaultProviders() {
  Registry.register(
    ExtensionPoints.STORAGE_PROVIDERS,
    'localStorage',
    LocalStorageProvider
  );
  Registry.register(
    ExtensionPoints.API_PROVIDERS,
    'gemini',
    GeminiProvider
  );
  console.log('[ProviderBoot] Registered default providers');
}

// main.js
import { initializeDefaultProviders } from './core/provider-boot.js';

function initializeGDRS() {
  // ...
  initializeDefaultProviders();  // ← Single source of truth
  Renderer.init();
  boot();
}

// storage-provider-manager.js
// Remove _initializeDefaultProvider() call

BENEFIT: Scalable, maintainable, single source of truth
TRADE-OFF: Additional file, but clearer intent

